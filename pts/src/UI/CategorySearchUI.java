package UI;

import DataProcessing.dci_closed.AlgoDCI_Closed;
import DataProcessing.Component;
import DataProcessing.LogData;
import Util.CommonConstants;

import java.awt.event.WindowAdapter;
import java.io.File;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author milos
 */
public class CategorySearchUI extends javax.swing.JFrame {

    /**
     * Creates new form CategorySearchUI
     */
    String filename;
    public CategorySearchUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        optionComboBox = new javax.swing.JComboBox<>();
        searchField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        contentTable = new javax.swing.JTable();
        fileChooseButton = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        filePathLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Search Data");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setText("Search data by a specific category");

        jLabel3.setText("Check a specific category from below:");

        optionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "Time", "Component", "Event Name", "Event Context", "Description", "IP Address" }));
        optionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionComboBoxActionPerformed(evt);
            }
        });

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        jLabel4.setText("Enter data to search:");

        contentTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String [] {
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }
        ));
        jScrollPane1.setViewportView(contentTable);

        fileChooseButton.setText("Choose file");
        fileChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooseButtonActionPerformed(evt);
            }
        });

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        filePathLabel.setText("File path: Not specified yet.");

        searchField.setVisible(false);
        jLabel4.setVisible(false);
        jScrollPane1.setVisible(false);
        fileChooseButton.setVisible(false);
        submitButton.setVisible(false);
        filePathLabel.setVisible(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(27, 27, 27)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(11, 11, 11)
                                                .addComponent(jLabel2))
                                        .addComponent(jLabel3)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(2, 2, 2)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(optionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel4)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(fileChooseButton))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(56, 56, 56)
                                                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                        .addComponent(filePathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(195, 195, 195))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(264, 264, 264)
                                .addComponent(submitButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(42, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(optionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(fileChooseButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filePathLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(submitButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();

    }// </editor-fold>

    addWindowListener(new WindowAdapter() {
        public void windowClosing(WindowEvent e) {
            int confirmed = JOptionPane.showConfirmDialog(null,
                    "Are you sure you want to exit the program?", "Exit Program Message Box",
                    JOptionPane.YES_NO_OPTION);

            if (confirmed == JOptionPane.YES_OPTION) {
                dispose();
            }
        }
    }
    private void optionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {

        if (optionComboBox.getSelectedItem() != "") {
            System.out.println(optionComboBox.getSelectedItem().toString());
        }
        searchField.setVisible(true);
        jLabel4.setVisible(true);
        fileChooseButton.setVisible(true);
        submitButton.setVisible(true);
        filePathLabel.setVisible(true);
    }

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String filePath = filename;
        File file = new File(filePath);
        LogData logData = new LogData();
        String searchData = searchField.getText();
        String[] columnNames = {"ID",
                "Time",
                "Component",
                "EventName",
                "EventContext",
                "Description",
                "Origin",
                "IP address"
        };

        List<Component> schedule = logData.fullLogData;
        DefaultTableModel model = new DefaultTableModel();
        contentTable.setModel(model);
        model.setColumnIdentifiers(columnNames);

        AlgoDCI_Closed dci_closed = new AlgoDCI_Closed();

        if (optionComboBox.getSelectedItem().equals("ID")) {

            for (Component c : schedule) {
                int newID = Integer.parseInt(searchData);
                if(c.getUserIdFromDescription() == newID){
                    Object[] data = new Object[8];
                    data[0] = c.getUserIdFromDescription();
                    data[1] = c.getTime();
                    data[2] = c.getComponent();
                    data[3] = c.getEventName();
                    data[4] = c.getEventContext();
                    data[5] = c.getDescription();
                    data[6] = c.getOrigin();
                    data[7] = c.getIp();
                    model.addRow(data);
                }
            }
        }
        if (optionComboBox.getSelectedItem().equals("Time")) {
            for (Component c : schedule) {
                if(c.getTime().equals(searchData)){
                    Object[] data = new Object[8];
                    data[0] = c.getUserIdFromDescription();
                    data[1] = c.getTime();
                    data[2] = c.getComponent();
                    data[3] = c.getEventName();
                    data[4] = c.getEventContext();
                    data[5] = c.getDescription();
                    data[6] = c.getOrigin();
                    data[7] = c.getIp();
                    model.addRow(data);
                }
            }
        }
        if (optionComboBox.getSelectedItem().equals("Component")) {
            for (Component c : schedule) {
                if(c.getComponent().equals(searchData)){
                    Object[] data = new Object[8];
                    data[0] = c.getUserIdFromDescription();
                    data[1] = c.getTime();
                    data[2] = c.getComponent();
                    data[3] = c.getEventName();
                    data[4] = c.getEventContext();
                    data[5] = c.getDescription();
                    data[6] = c.getOrigin();
                    data[7] = c.getIp();
                    model.addRow(data);
                }
            }
        }
        if (optionComboBox.getSelectedItem().equals("Event Name")) {
            for (Component c : schedule) {
                if(c.getEventName().equals(searchData)){
                    Object[] data = new Object[8];
                    data[0] = c.getUserIdFromDescription();
                    data[1] = c.getTime();
                    data[2] = c.getComponent();
                    data[3] = c.getEventName();
                    data[4] = c.getEventContext();
                    data[5] = c.getDescription();
                    data[6] = c.getOrigin();
                    data[7] = c.getIp();
                    model.addRow(data);
                }
            }
        }
        if (optionComboBox.getSelectedItem().equals("Event Context")) {
            for (Component c : schedule) {
                if(c.getEventContext().contains(searchData)){
                    Object[] data = new Object[8];
                    data[0] = c.getUserIdFromDescription();
                    data[1] = c.getTime();
                    data[2] = c.getComponent();
                    data[3] = c.getEventName();
                    data[4] = c.getEventContext();
                    data[5] = c.getDescription();
                    data[6] = c.getOrigin();
                    data[7] = c.getIp();
                    model.addRow(data);
                }
            }
        }
        if (optionComboBox.getSelectedItem().equals("Description")) {
            for (Component c : schedule) {
                if(c.getDescription().contains(searchData)){
                    Object[] data = new Object[8];
                    data[0] = c.getUserIdFromDescription();
                    data[1] = c.getTime();
                    data[2] = c.getComponent();
                    data[3] = c.getEventName();
                    data[4] = c.getEventContext();
                    data[5] = c.getDescription();
                    data[6] = c.getOrigin();
                    data[7] = c.getIp();
                    model.addRow(data);
                }
            }
        }
        if (optionComboBox.getSelectedItem().equals("IP Address")) {
            for (Component c : schedule) {
                if(c.getIp().equals(searchData)){
                    Object[] data = new Object[8];
                    data[0] = c.getUserIdFromDescription();
                    data[1] = c.getTime();
                    data[2] = c.getComponent();
                    data[3] = c.getEventName();
                    data[4] = c.getEventContext();
                    data[5] = c.getDescription();
                    data[6] = c.getOrigin();
                    data[7] = c.getIp();
                    model.addRow(data);
                }
                else {
                    JOptionPane optionPane = new JOptionPane(CommonConstants.NO_DATA_FOUND_FOR_USER_CHOICE,JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }

        jScrollPane1.setVisible(true);
        contentTable.setVisible(true);
    }

    private void fileChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("C:\\Users\\milos\\Documents\\logfile"));
        int value = chooser.showOpenDialog(null);
        if (value == JFileChooser.APPROVE_OPTION) {
            File f = chooser.getSelectedFile();
            filename = f.getAbsolutePath();
            filePathLabel.setText("File path: " + filename);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CategorySearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CategorySearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CategorySearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CategorySearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CategorySearchUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton fileChooseButton;
    private javax.swing.JButton submitButton;
    private javax.swing.JComboBox<String> optionComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel filePathLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable contentTable;
    private javax.swing.JTextField searchField;
    // End of variables declaration
}
